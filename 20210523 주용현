1. oop 란?
   Object Oriented Programing 객체 지형 프로그래밍
   객체 지형 프로그래밍이란 실세계에 존재하는 객체를 소프트웨어의 세계에서 표현하기 위해 객체의 핵심적인 개념 또는 기능만을 추출하는 추상화를 통해
   모델링하려는 프로그래밍 패러다임.
2. oop의 4대 개념
   ① 캡슐화 (Encapsulation)
       - 캡슐화란 객체가 특정한 목적을 위해 필요한 변수나 메서드를 하나로 묶는 것. 따라서 클래스를 만들 때 만들어진 객체가 특정한 목적을 가지고 사용해야할 변수와
         그 변수를 가지고 특정한 액션 즉 메서드 또는 함수를 관련성 있게 클래스에 구성해야됨.
       - 정보의 은닉화. 변수를 바로 접근할 수 없도록 private 선언 데이터를 보호하고 getter, setter등의 메서드로 간접적으로 접근하는 것.
   ② 추상화 (Abstraction)
      - 여러 객체에 공통적으로 사용되는, 사용되어야 하는 내용을 뽑아내는 것.
   ③ 다형성 (Polymorphism)
      - 상속을 통해 기능을 확장하거나 변경하는 것을 가능하게 해줌. 이를 통해 코드의 재사용, 코드길이 감소등 유지보수가 용이하도록 도와주는 개념
      - 조상 타입의 변수로 자손 타입의 객체를 다루는 것
      - 자손 타입의 참조변수는 조상 타입의 객체를 가리킬 수 없다.
      - 오버라이딩 : 조상 클래스의 메서드를 재정의 하는 것. 
                    조건 : 선언부가 조상 클래스의 메서드와 일치해야 함
                          접근 제어자가 조상 클래스의 메서드 보다 좁은 범위로 사용할 수 없음.
                          예외를 조상 클래스의 메서드 보다 많이 사용할 수 없음
      - 오버로딩 : 클래스내에 이름은 같지만 서로 다르게 동작하는 메서드
   ④ 상속 (Inheritance)
      - 기존 상위클래스에 근거하여 새롭게 클래스와 행위를 정의할 수 있게 도와주는 개념
      - 기존 클래스의 기능을 가져와 재사용과 동시에 새로운 기능을 추가할 수 있게 해줌
      - 자바에선 다중 상속이 불가능, 대신 인터페이스를(구현) 이용함
3. mybatis란
   - 자바 오브젝트와 SQL사이의 자동 매핑 기능을 지원하는 ORM(Object relational Mapping)프레임워크이다. SQL을 별도의 파일로 분리해서 관리하게 해준다.
     새로운 DB프로그래밍 패러다임을 익혀야하는 부담없이 SQL을 그대로 이용하면서 JDBC코드 작성의 불편함도 제거해주고 도메인 객체나 VO객체를 중심으로 개발이 가능하다는 장점이 있다.
   - 특징
     1. 쉬운 접근성과 코드의 간결함, JDBC의 모든기능을 제공, 깔끔한 소스코드를 유지가능, 수동적인 파라미터 설정과 쿼리 결과에 대한 맵핑 구문을 제거
     2. SQL문과 프로그래밍 코드의 분리
     3. 다양한 프로그래밍 언어로 구현가능
4. MVC모델2
   - 웹 애플리케이션의 각 기능을 분리하여 구현한다. 클라이언트 요청 처리, 응답처리, 비즈니스 로직 처리 등의 기능을 모듈화한다.
   특징
    1. 편리한 유지보수:부분이나 모듈 별로 프로그램을 설계하고 구축하고 작성하므로 오류가 발생할 확률이 낮다.
    2. 높은 재사용성:각각의 기능들이 부품화,모듈화되어 있어 필요한 부분만 조합하여 다양한 웹 애플리케이션을 빠르게 만들어낼 수 있다.
    3. 분업화:디자이너나 프로그래머가 전체 기능을 모르더라도 각자의 업무만 처리하면 프로그램이 완성된다.
5. 싱글톤이란
   - 어떤 클래스가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 객체를 만들어 사용하는 디자인패턴을 의미한다.
     생성자의 호출이 반복적으로 이뤄져도 실제로 생성되는 객체는 최초 생성된 객체를 반환해주는 것.
   - 한번의 생성으로 전역성을 띄기에 다른 객체와 공유가 용이하다.
   - 문제점 : 싱글톤으로 만든 객체의 역할이 간단한 것이 아닌 복잡한 경우라면 싱글톤 객제를 사용하는 다른 객체간의 결함도가 높아져서 객체지향설계 원칙에 어긋나게 된다.
              싱글톤 객체를 수정할 경우 싱글톤 객체를 사용하는 곳에서 사이드 이팩트 발생 확률이 생기게 되며, 멀티쓰레드환경에서 동기화 처리 문제등이 생기게 된다.
6. web서버와 was서버의 구분
   -web서버의 개념
    * 소프트웨어와 하드웨어로 구분된다.
    * 하드웨어 : web서버가 설치되어 있는 컴퓨터 / 소프트웨어 : 웹 브라우저 클라이언트로부터 http 요청을 받아 정적인 컨텐트(html,css,jpeg등)를 제공하는 컴퓨터 프로그램
   -web서버의 기능
    * HTTP 프로토콜을 기반으로 하여 클라이언트(웹 브라우저 또는 웹 크롤러)의 요청을 서비스 하는 기능을 담당한다.
    * 정적인 컨테츠 제공, was를 거치지 않고 바로 자원을 제공한다.
    * 동적인 컨텐츠 제공을 위한 요청 전달, 클라이언트 요청(request)을 was에 보내고, was가 처리한 결과를 클라이언트에게 전달(response)한다.
   -was의 개념
    * DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기 위해 만들어진 Application Server
    * HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어(소프트웨어 엔진)이다.
    * “웹 컨테이너(Web Container)” 혹은 “서블릿 컨테이너(Servlet Container)”라고도 불린다.
7. class의 멤버 구성
  -필드 : 필드(인스턴스 변수)는 객체의 고유 데이터, 부품 객체, 상태 정보를 저장한다.
         선언 형태는 변수(지역 변수)와 비슷하지만 변수는 생성자와 메소드 내에서만 사용되고 생성자와 메소드가 실행 종료되면 자동 소멸된다. 
         하지만 필드는 생성자와 메소드 전체에서 사용되며 객체가 소멸되지 않는 한 객체와 함께 존재한다.
  -생성자 :  생성자는 new 연산자로 호출할 수 있으며, 객체 생성 시 초기화를 담당한다.
            생성자로부터 생성된 객체는 힙(heap) 영역에 생성된다. 생성자는 클래스의 이름과 동일하며(대소문자 구분), 리턴 타입이 없다.
  -메소드 : 메소드는 필드를 읽고 수정하거나 다른 객체를 생성해서 다양한 기능을 수행하는 객체의 동작에 해당한다. 
           메소드는 실행 시 외부로부터 매개값을 전달받을 수 있고 실행 후 특정 값을 리턴할 수도 있다.
8. interface의 멤버 구성
  -상수 필드만 선언이 가능하다.(일반 변수 선언불가) 컴파일 과정에서 자동으로 public static final이 붙는다
  -추상메서드. 인터페이스에서 메소드를 정의하면 public abstract를 생략하여도 자동으로 컴파일과정에서 붙는다.
  -디폴트 메서드. 실행블럭을 가지고 있으며 반드시 default 키워드를 명시해야 한다. 인터페이스만으로는 인스턴스를 생성할 수 없기 때문에 클래스들이 디폴트 메서드를 기본적으로
   구성하여 갖고 있다.
  -정적 메서드 디폴트 메서드와 같이 실행블록을 가지고 있으며 static 키워드를 명시해야 된다.
9. html, css, jquery, ajax, json?
  -html : 웹 페이지는 html 문서라고 불리며, html태그들로 구성된다. 각각의 html태그는 웹 페이지의 디자인이나 기능을 결정하는데 사용된다.
  -css : html 요소들이 각종 미디어에서 어떻게 보이는가를 정의하는데 사용되는 스타일 시트 언어이다. 
  -jquery : 오픈 소스 기반의 자바스크립트 라이브러리이다. 웹 사이트에 자바스크립트를 손쉽게 활용할 수 있게 해준다. 짧고 단순한 코드로 웹 페이지에 다양한 연출을 적용할 수 있다.
  -ajax : 자바스크립트 라이브러리이다. 브라우저가 가지고있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고 페이지의 일부만을 위한 데이터를 로드하는 기법이다.
          자바스크립트를 이용한 비동기 통신, 클라이언트와 서버간에 xml 데이터를 주고받는 기술이다.
  -json : 자바스크립트의 객체 표기법으로 파생된 부분 집합이다. 웹 어플리케이션에서 데이터를 전송할 때 일반적으로 사용된다.
